{
    "meta": {
        "label": "AdaBoostClassifier",
        "description": "An AdaBoost classifier.",
        "icon": "icon-puzzle-piece"
    },
    "predictionTypes": [
        "BINARY_CLASSIFICATION",
        "MULTICLASS"
    ],
    "gridSearchMode": "MANAGED",
    "supportsSampleWeights": true,
    "acceptsSparseMatrix": false,
    "params": [
        {
            "name": "base_estimator",
            "label": "Base Estimator",
            "description": "The base estimator from which the boosted ensemble is built. Support for sample weighting is required, as well as proper ``classes_`` and ``n_classes_`` attributes. If ``None``, then the base estimator is :class:`~sklearn.tree.DecisionTreeClassifier` initialized with `max_depth=1`.",
            "type": "STRINGS",
            "gridParam": true
        },
        {
            "name": "n_estimators",
            "label": "N Estimators",
            "description": "The maximum number of estimators at which boosting is terminated. In case of perfect fit, the learning procedure is stopped early.",
            "defaultValue": [
                50
            ],
            "type": "DOUBLES",
            "gridParam": true
        },
        {
            "name": "learning_rate",
            "label": "Learning Rate",
            "description": "Weight applied to each classifier at each boosting iteration. A higher learning rate increases the contribution of each classifier. There is a trade-off between the `learning_rate` and `n_estimators` parameters.",
            "defaultValue": [
                1.0
            ],
            "type": "DOUBLES",
            "gridParam": true
        },
        {
            "name": "algorithm",
            "label": "Algorithm",
            "description": "If 'SAMME.R' then use the SAMME.R real boosting algorithm. ``base_estimator`` must support calculation of class probabilities. If 'SAMME' then use the SAMME discrete boosting algorithm. The SAMME.R algorithm typically converges faster than SAMME, achieving a lower test error with fewer boosting iterations.",
            "defaultValue": [
                "SAMME.R"
            ],
            "type": "MULTISELECT",
            "gridParam": true,
            "selectChoices": [
                {
                    "value": "SAMME",
                    "label": "SAMME"
                },
                {
                    "value": "SAMME.R",
                    "label": "SAMME.R"
                }
            ]
        },
        {
            "name": "random_state",
            "label": "Random State",
            "description": "Controls the random seed given at each `base_estimator` at each boosting iteration. Thus, it is only used when `base_estimator` exposes a `random_state`. Pass an int for reproducible output across multiple function calls. See :term:`Glossary <random_state>`.",
            "type": "INT"
        }
    ]
}